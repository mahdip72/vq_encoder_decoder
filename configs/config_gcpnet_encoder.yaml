top_k: 30 #default 30 The number of edges to draw per node (as destination node).
num_positional_embeddings: 16  #default 16
use_positional_embeddings: True
emb_dim: 128
node_s_emb_dim: ${.emb_dim} # Dimension of the node state embeddings
node_v_emb_dim: 16 # Dimension of the node vector embeddings
edge_s_emb_dim: 32 # Dimension of the edge state embeddings
edge_v_emb_dim: 4 # Dimension of the edge vector embeddings

pos_scale_factor: 10.0  # By how much to upscale the decoder's output positions

# GCPNet module config #
module_cfg:
  norm_pos_diff: true
  scalar_gate: 0
  vector_gate: true
  scalar_nonlinearity: silu
  vector_nonlinearity: silu
  nonlinearities:
    - silu
    - silu
  r_max: 10.0
  num_rbf: 8
  bottleneck: 4
  vector_linear: true
  vector_identity: true
  default_bottleneck: 4
  predict_backbone_positions: false  # note: if `false`, then the input node backbone positions will not be updated
  predict_node_rep: true  # note: if `false`, then a final projection of the node features will not be performed
  node_positions_weight: 1.0
  update_positions_with_vector_sum: false
  enable_e3_equivariance: false
  pool: sum
# GCPNet model config #
model_cfg:
  h_input_dim: 6
  chi_input_dim: 3
  e_input_dim: 8
  xi_input_dim: 1
  # note: each `hidden_dim` must be evenly divisible by `bottleneck`
  h_hidden_dim: 128
  chi_hidden_dim: 16
  e_hidden_dim: 32
  xi_hidden_dim: 4
  num_layers: 6
  num_bb_update_layers: 2
  dropout: 0.0
# GCPNet layer config #
layer_cfg:
  pre_norm: false
  use_gcp_norm: true
  use_gcp_dropout: true
  use_scalar_message_attention: true
  num_feedforward_layers: 2
  dropout: 0.0
  nonlinearity_slope: 1e-2
  # GCPNet message-passing config #
  mp_cfg:
    edge_encoder: false
    edge_gate: false
    num_message_layers: 4
    message_residual: 0
    message_ff_multiplier: 1
    self_message: true